{"ast":null,"code":"module.exports = function (md, options) {\n  options = options || {};\n  options.listUnicodeChar = options.hasOwnProperty('listUnicodeChar') ? options.listUnicodeChar : false;\n  options.stripListLeaders = options.hasOwnProperty('stripListLeaders') ? options.stripListLeaders : true;\n  options.gfm = options.hasOwnProperty('gfm') ? options.gfm : true;\n  options.useImgAltText = options.hasOwnProperty('useImgAltText') ? options.useImgAltText : true;\n  var output = md || ''; // Remove horizontal rules (stripListHeaders conflict with this rule, which is why it has been moved to the top)\n\n  output = output.replace(/^(-\\s*?|\\*\\s*?|_\\s*?){3,}\\s*$/gm, '');\n\n  try {\n    if (options.stripListLeaders) {\n      if (options.listUnicodeChar) output = output.replace(/^([\\s\\t]*)([\\*\\-\\+]|\\d+\\.)\\s+/gm, options.listUnicodeChar + ' $1');else output = output.replace(/^([\\s\\t]*)([\\*\\-\\+]|\\d+\\.)\\s+/gm, '$1');\n    }\n\n    if (options.gfm) {\n      output = output // Header\n      .replace(/\\n={2,}/g, '\\n') // Fenced codeblocks\n      .replace(/~{3}.*\\n/g, '') // Strikethrough\n      .replace(/~~/g, '') // Fenced codeblocks\n      .replace(/`{3}.*\\n/g, '');\n    }\n\n    output = output // Remove HTML tags\n    .replace(/<[^>]*>/g, '') // Remove setext-style headers\n    .replace(/^[=\\-]{2,}\\s*$/g, '') // Remove footnotes?\n    .replace(/\\[\\^.+?\\](\\: .*?$)?/g, '').replace(/\\s{0,2}\\[.*?\\]: .*?$/g, '') // Remove images\n    .replace(/\\!\\[(.*?)\\][\\[\\(].*?[\\]\\)]/g, options.useImgAltText ? '$1' : '') // Remove inline links\n    .replace(/\\[(.*?)\\][\\[\\(].*?[\\]\\)]/g, '$1') // Remove blockquotes\n    .replace(/^\\s{0,3}>\\s?/g, '') // Remove reference-style links?\n    .replace(/^\\s{1,2}\\[(.*?)\\]: (\\S+)( \".*?\")?\\s*$/g, '') // Remove atx-style headers\n    .replace(/^(\\n)?\\s{0,}#{1,6}\\s+| {0,}(\\n)?\\s{0,}#{0,} {0,}(\\n)?\\s{0,}$/gm, '$1$2$3') // Remove emphasis (repeat the line to remove double emphasis)\n    .replace(/([\\*_]{1,3})(\\S.*?\\S{0,1})\\1/g, '$2').replace(/([\\*_]{1,3})(\\S.*?\\S{0,1})\\1/g, '$2') // Remove code blocks\n    .replace(/(`{3,})(.*?)\\1/gm, '$2') // Remove inline code\n    .replace(/`(.+?)`/g, '$1') // Replace two or more newlines with exactly two? Not entirely sure this belongs here...\n    .replace(/\\n{2,}/g, '\\n\\n');\n  } catch (e) {\n    console.error(e);\n    return md;\n  }\n\n  return output;\n};","map":{"version":3,"sources":["D:/문서/개발/react/blog/blog-frontend/node_modules/remove-markdown/index.js"],"names":["module","exports","md","options","listUnicodeChar","hasOwnProperty","stripListLeaders","gfm","useImgAltText","output","replace","e","console","error"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,UAASC,EAAT,EAAaC,OAAb,EAAsB;AACrCA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,EAAAA,OAAO,CAACC,eAAR,GAA0BD,OAAO,CAACE,cAAR,CAAuB,iBAAvB,IAA4CF,OAAO,CAACC,eAApD,GAAsE,KAAhG;AACAD,EAAAA,OAAO,CAACG,gBAAR,GAA2BH,OAAO,CAACE,cAAR,CAAuB,kBAAvB,IAA6CF,OAAO,CAACG,gBAArD,GAAwE,IAAnG;AACAH,EAAAA,OAAO,CAACI,GAAR,GAAcJ,OAAO,CAACE,cAAR,CAAuB,KAAvB,IAAgCF,OAAO,CAACI,GAAxC,GAA8C,IAA5D;AACAJ,EAAAA,OAAO,CAACK,aAAR,GAAwBL,OAAO,CAACE,cAAR,CAAuB,eAAvB,IAA0CF,OAAO,CAACK,aAAlD,GAAkE,IAA1F;AAEA,MAAIC,MAAM,GAAGP,EAAE,IAAI,EAAnB,CAPqC,CASrC;;AACAO,EAAAA,MAAM,GAAGA,MAAM,CAACC,OAAP,CAAe,iCAAf,EAAkD,EAAlD,CAAT;;AAEA,MAAI;AACF,QAAIP,OAAO,CAACG,gBAAZ,EAA8B;AAC5B,UAAIH,OAAO,CAACC,eAAZ,EACEK,MAAM,GAAGA,MAAM,CAACC,OAAP,CAAe,iCAAf,EAAkDP,OAAO,CAACC,eAAR,GAA0B,KAA5E,CAAT,CADF,KAGEK,MAAM,GAAGA,MAAM,CAACC,OAAP,CAAe,iCAAf,EAAkD,IAAlD,CAAT;AACH;;AACD,QAAIP,OAAO,CAACI,GAAZ,EAAiB;AACfE,MAAAA,MAAM,GAAGA,MAAM,CACb;AADa,OAEZC,OAFM,CAEE,UAFF,EAEc,IAFd,EAGP;AAHO,OAINA,OAJM,CAIE,WAJF,EAIe,EAJf,EAKP;AALO,OAMNA,OANM,CAME,KANF,EAMS,EANT,EAOP;AAPO,OAQNA,OARM,CAQE,WARF,EAQe,EARf,CAAT;AASD;;AACDD,IAAAA,MAAM,GAAGA,MAAM,CACb;AADa,KAEZC,OAFM,CAEE,UAFF,EAEc,EAFd,EAGP;AAHO,KAINA,OAJM,CAIE,iBAJF,EAIqB,EAJrB,EAKP;AALO,KAMNA,OANM,CAME,sBANF,EAM0B,EAN1B,EAONA,OAPM,CAOE,uBAPF,EAO2B,EAP3B,EAQP;AARO,KASNA,OATM,CASE,6BATF,EASiCP,OAAO,CAACK,aAAR,GAAwB,IAAxB,GAA+B,EAThE,EAUP;AAVO,KAWNE,OAXM,CAWE,2BAXF,EAW+B,IAX/B,EAYP;AAZO,KAaNA,OAbM,CAaE,eAbF,EAamB,EAbnB,EAcP;AAdO,KAeNA,OAfM,CAeE,wCAfF,EAe4C,EAf5C,EAgBP;AAhBO,KAiBNA,OAjBM,CAiBE,gEAjBF,EAiBoE,QAjBpE,EAkBP;AAlBO,KAmBNA,OAnBM,CAmBE,+BAnBF,EAmBmC,IAnBnC,EAoBNA,OApBM,CAoBE,+BApBF,EAoBmC,IApBnC,EAqBP;AArBO,KAsBNA,OAtBM,CAsBE,kBAtBF,EAsBsB,IAtBtB,EAuBP;AAvBO,KAwBNA,OAxBM,CAwBE,UAxBF,EAwBc,IAxBd,EAyBP;AAzBO,KA0BNA,OA1BM,CA0BE,SA1BF,EA0Ba,MA1Bb,CAAT;AA2BD,GA7CD,CA6CE,OAAMC,CAAN,EAAS;AACTC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,WAAOT,EAAP;AACD;;AACD,SAAOO,MAAP;AACD,CA9DD","sourcesContent":["module.exports = function(md, options) {\n  options = options || {};\n  options.listUnicodeChar = options.hasOwnProperty('listUnicodeChar') ? options.listUnicodeChar : false;\n  options.stripListLeaders = options.hasOwnProperty('stripListLeaders') ? options.stripListLeaders : true;\n  options.gfm = options.hasOwnProperty('gfm') ? options.gfm : true;\n  options.useImgAltText = options.hasOwnProperty('useImgAltText') ? options.useImgAltText : true;\n\n  var output = md || '';\n\n  // Remove horizontal rules (stripListHeaders conflict with this rule, which is why it has been moved to the top)\n  output = output.replace(/^(-\\s*?|\\*\\s*?|_\\s*?){3,}\\s*$/gm, '');\n\n  try {\n    if (options.stripListLeaders) {\n      if (options.listUnicodeChar)\n        output = output.replace(/^([\\s\\t]*)([\\*\\-\\+]|\\d+\\.)\\s+/gm, options.listUnicodeChar + ' $1');\n      else\n        output = output.replace(/^([\\s\\t]*)([\\*\\-\\+]|\\d+\\.)\\s+/gm, '$1');\n    }\n    if (options.gfm) {\n      output = output\n        // Header\n        .replace(/\\n={2,}/g, '\\n')\n        // Fenced codeblocks\n        .replace(/~{3}.*\\n/g, '')\n        // Strikethrough\n        .replace(/~~/g, '')\n        // Fenced codeblocks\n        .replace(/`{3}.*\\n/g, '');\n    }\n    output = output\n      // Remove HTML tags\n      .replace(/<[^>]*>/g, '')\n      // Remove setext-style headers\n      .replace(/^[=\\-]{2,}\\s*$/g, '')\n      // Remove footnotes?\n      .replace(/\\[\\^.+?\\](\\: .*?$)?/g, '')\n      .replace(/\\s{0,2}\\[.*?\\]: .*?$/g, '')\n      // Remove images\n      .replace(/\\!\\[(.*?)\\][\\[\\(].*?[\\]\\)]/g, options.useImgAltText ? '$1' : '')\n      // Remove inline links\n      .replace(/\\[(.*?)\\][\\[\\(].*?[\\]\\)]/g, '$1')\n      // Remove blockquotes\n      .replace(/^\\s{0,3}>\\s?/g, '')\n      // Remove reference-style links?\n      .replace(/^\\s{1,2}\\[(.*?)\\]: (\\S+)( \".*?\")?\\s*$/g, '')\n      // Remove atx-style headers\n      .replace(/^(\\n)?\\s{0,}#{1,6}\\s+| {0,}(\\n)?\\s{0,}#{0,} {0,}(\\n)?\\s{0,}$/gm, '$1$2$3')\n      // Remove emphasis (repeat the line to remove double emphasis)\n      .replace(/([\\*_]{1,3})(\\S.*?\\S{0,1})\\1/g, '$2')\n      .replace(/([\\*_]{1,3})(\\S.*?\\S{0,1})\\1/g, '$2')\n      // Remove code blocks\n      .replace(/(`{3,})(.*?)\\1/gm, '$2')\n      // Remove inline code\n      .replace(/`(.+?)`/g, '$1')\n      // Replace two or more newlines with exactly two? Not entirely sure this belongs here...\n      .replace(/\\n{2,}/g, '\\n\\n');\n  } catch(e) {\n    console.error(e);\n    return md;\n  }\n  return output;\n};\n"]},"metadata":{},"sourceType":"script"}