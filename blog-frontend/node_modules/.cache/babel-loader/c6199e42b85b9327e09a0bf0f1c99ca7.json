{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\uBB38\\uC11C\\\\\\uAC1C\\uBC1C\\\\react\\\\blog\\\\blog-frontend\\\\src\\\\containers\\\\list\\\\Listcontainer.js\";\nimport React, { Component } from 'react';\nimport PostList from 'components/list/PostList';\nimport Pagination from 'components/list/Pagination';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as listActions from 'store/modules/list';\n\nclass Listcontainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.getPostList = () => {\n      // 페이지와 태그 값을 부모에게서 받아 옵니다.\n      const {\n        tag,\n        page,\n        ListActions\n      } = this.props;\n      ListActions.getPostList({\n        page,\n        tag\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.getPostList();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // 페이지/태그가 바뀔 때 리스트를 다시 불러옵니다.\n    if (prevProps.page !== this.props.page || prevProps.tag !== this.props.tag) {\n      this.getPostList(); // 스크롤바를 맨 위로 올립니다.\n\n      document.documentElement.scrollTop = 0;\n    }\n  }\n\n  render() {\n    const {\n      loading,\n      posts,\n      page,\n      lastPage,\n      tag\n    } = this.props;\n    if (loading) return null; // 로딩 중에는 아무것도 보여 주지 않습니다.        \n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(PostList, {\n      posts: posts,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }), React.createElement(Pagination, {\n      page: page,\n      lastPage: lastPage,\n      tag: tag,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default connect(state => ({\n  lastPage: state.list.get('lastPage'),\n  posts: state.list.get('posts'),\n  loading: state.pender.pending['list/GET_POSTS_LIST']\n}), dispatch => ({\n  ListActions: bindActionCreators(listActions, dispatch)\n}))(Listcontainer);","map":{"version":3,"sources":["D:/문서/개발/react/blog/blog-frontend/src/containers/list/Listcontainer.js"],"names":["React","Component","PostList","Pagination","connect","bindActionCreators","listActions","Listcontainer","getPostList","tag","page","ListActions","props","componentDidMount","componentDidUpdate","prevProps","prevState","document","documentElement","scrollTop","render","loading","posts","lastPage","state","list","get","pender","pending","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,OAAO,KAAKC,WAAZ,MAA6B,oBAA7B;;AAEA,MAAMC,aAAN,SAA4BN,SAA5B,CAAsC;AAAA;AAAA;;AAAA,SAClCO,WADkC,GACpB,MAAM;AAChB;AACA,YAAM;AAAEC,QAAAA,GAAF;AAAOC,QAAAA,IAAP;AAAaC,QAAAA;AAAb,UAA6B,KAAKC,KAAxC;AACAD,MAAAA,WAAW,CAACH,WAAZ,CAAwB;AACpBE,QAAAA,IADoB;AAEpBD,QAAAA;AAFoB,OAAxB;AAIH,KARiC;AAAA;;AAUlCI,EAAAA,iBAAiB,GAAG;AAChB,SAAKL,WAAL;AACH;;AAEDM,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAsB;AACpC;AACA,QAAGD,SAAS,CAACL,IAAV,KAAmB,KAAKE,KAAL,CAAWF,IAA9B,IAAsCK,SAAS,CAACN,GAAV,KAAkB,KAAKG,KAAL,CAAWH,GAAtE,EAA2E;AACvE,WAAKD,WAAL,GADuE,CAEvE;;AACAS,MAAAA,QAAQ,CAACC,eAAT,CAAyBC,SAAzB,GAAqC,CAArC;AACH;AACJ;;AACDC,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,KAAX;AAAkBZ,MAAAA,IAAlB;AAAwBa,MAAAA,QAAxB;AAAkCd,MAAAA;AAAlC,QAA0C,KAAKG,KAArD;AACA,QAAGS,OAAH,EAAY,OAAO,IAAP,CAFP,CAEoB;;AACzB,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAEC,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,UAAD;AAAY,MAAA,IAAI,EAAEZ,IAAlB;AAAwB,MAAA,QAAQ,EAAEa,QAAlC;AAA4C,MAAA,GAAG,EAAEd,GAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ;AAMH;;AA/BiC;;AAkCtC,eAAeL,OAAO,CACjBoB,KAAD,KAAY;AACRD,EAAAA,QAAQ,EAAEC,KAAK,CAACC,IAAN,CAAWC,GAAX,CAAe,UAAf,CADF;AAERJ,EAAAA,KAAK,EAAEE,KAAK,CAACC,IAAN,CAAWC,GAAX,CAAe,OAAf,CAFC;AAGRL,EAAAA,OAAO,EAAEG,KAAK,CAACG,MAAN,CAAaC,OAAb,CAAqB,qBAArB;AAHD,CAAZ,CADkB,EAMjBC,QAAD,KAAe;AACXlB,EAAAA,WAAW,EAAEN,kBAAkB,CAACC,WAAD,EAAcuB,QAAd;AADpB,CAAf,CANkB,CAAP,CASbtB,aATa,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport PostList from 'components/list/PostList';\r\nimport Pagination from 'components/list/Pagination';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport * as listActions from 'store/modules/list';\r\n\r\nclass Listcontainer extends Component {\r\n    getPostList = () => {\r\n        // 페이지와 태그 값을 부모에게서 받아 옵니다.\r\n        const { tag, page, ListActions } = this.props;\r\n        ListActions.getPostList({\r\n            page,\r\n            tag\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getPostList();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        // 페이지/태그가 바뀔 때 리스트를 다시 불러옵니다.\r\n        if(prevProps.page !== this.props.page || prevProps.tag !== this.props.tag) {\r\n            this.getPostList();\r\n            // 스크롤바를 맨 위로 올립니다.\r\n            document.documentElement.scrollTop = 0;\r\n        }\r\n    }\r\n    render() {\r\n        const { loading, posts, page, lastPage, tag } = this.props;\r\n        if(loading) return null; // 로딩 중에는 아무것도 보여 주지 않습니다.        \r\n        return (\r\n            <div>\r\n                <PostList posts={posts} />\r\n                <Pagination page={page} lastPage={lastPage} tag={tag} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        lastPage: state.list.get('lastPage'),\r\n        posts: state.list.get('posts'),\r\n        loading: state.pender.pending['list/GET_POSTS_LIST']\r\n    }),\r\n    (dispatch) => ({\r\n        ListActions: bindActionCreators(listActions, dispatch)\r\n    })\r\n)(Listcontainer);"]},"metadata":{},"sourceType":"module"}