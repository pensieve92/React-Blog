{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\uBB38\\uC11C\\\\\\uAC1C\\uBC1C\\\\react\\\\blog\\\\blog-frontend\\\\src\\\\components\\\\editor\\\\EditorPane\\\\EditorPane.js\";\nimport React, { Component } from 'react';\nimport styles from './EditorPane.scss';\nimport classNames from 'classnames/bind';\nimport CodeMirror from 'codemirror';\nimport 'codemirror/mode/markdown/markdown'; // 마크다운 문법 색상\n// 마크다운 내부에 들어가는 코드 색상\n\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/mode/jsx/jsx';\nimport 'codemirror/mode/css/css';\nimport 'codemirror/mode/shell/shell'; // CodeMirror를 위한 CSS 스타일\n\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/monokai.css';\nconst cx = classNames.bind(styles);\n\nclass EditorPane extends Component {\n  constructor(...args) {\n    super(...args);\n    this.editor = null;\n    this.codeMirror = null;\n\n    this.initializeEditor = () => {\n      this.codeMirror = CodeMirror(this.editor, {\n        mode: 'markdown',\n        theme: 'monokai',\n        lineNumbers: true,\n        // 왼쪽에 라인 넘버주기\n        lineWrapping: true // 내용이 너무 길면 다음 줄에 작성\n\n      });\n      this.codeMirror.on('change', this.handleChangeMarkdown);\n    };\n\n    this.handleChange = e => {\n      const {\n        onChangeInput\n      } = this.props;\n      const {\n        value,\n        name\n      } = e.target;\n      onChangeInput({\n        name,\n        value\n      });\n    };\n\n    this.handleChangeMarkdown = doc => {\n      const {\n        onChangeInput\n      } = this.props;\n      this.cursor = doc.getCursor(); //텍스트 cursor 위치 저장\n\n      onChangeInput({\n        name: 'markdown',\n        value: doc.getValue()\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.initializeEditor();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // markdown이 변경되면 에디터 값도 변경합니다.\n    // 이 과정에서 텍스트 커서의 위치가 초기화되기 때문에\n    // 저장한 커서의 위치가 있으면 해당 위치로 설정합니다.\n    if (prevProps.markdown !== this.props.markdown) {\n      const {\n        codeMirror,\n        cursor\n      } = this;\n      if (!codeMirror) return; // 인스턴스가 아직 만들지 않았을 때\n\n      codeMirror.setValue(this.props.markdown);\n      if (!cursor) return; // 커서가 없을경우\n\n      codeMirror.setCursor(cursor);\n    }\n  }\n\n  render() {\n    const {\n      handleChange\n    } = this;\n    const {\n      tags,\n      title\n    } = this.props;\n    return React.createElement(\"div\", {\n      className: cx('EditorPane'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      className: cx('title'),\n      placeholder: \"\\uC81C\\uBAA9\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\",\n      name: \"title\",\n      value: title,\n      onChange: handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: cx('code-editor'),\n      ref: ref => this.editor = ref,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: cx('tags'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: cx('description'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"\\uD0DC\\uADF8\"), React.createElement(\"input\", {\n      name: \"tags\",\n      placeholder: \"\\uD0DC\\uADF8\\uB97C \\uC785\\uB825\\uD558\\uC138\\uC694 (\\uC27C\\uD45C\\uB85C \\uAD6C\\uBD80)\",\n      value: tags,\n      onChange: handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default EditorPane;","map":{"version":3,"sources":["D:/문서/개발/react/blog/blog-frontend/src/components/editor/EditorPane/EditorPane.js"],"names":["React","Component","styles","classNames","CodeMirror","cx","bind","EditorPane","editor","codeMirror","initializeEditor","mode","theme","lineNumbers","lineWrapping","on","handleChangeMarkdown","handleChange","e","onChangeInput","props","value","name","target","doc","cursor","getCursor","getValue","componentDidMount","componentDidUpdate","prevProps","prevState","markdown","setValue","setCursor","render","tags","title","ref"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport styles from './EditorPane.scss';\nimport classNames from 'classnames/bind';\n\nimport CodeMirror from 'codemirror';\n\nimport 'codemirror/mode/markdown/markdown'; // 마크다운 문법 색상\n// 마크다운 내부에 들어가는 코드 색상\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/mode/jsx/jsx';\nimport 'codemirror/mode/css/css';\nimport 'codemirror/mode/shell/shell';\n\n// CodeMirror를 위한 CSS 스타일\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/monokai.css';\n\n\nconst cx = classNames.bind(styles);\n    \nclass EditorPane extends Component {\n  editor = null; // 에디터 ref\n  codeMirror = null; // CodeMirror 인스턴스\n  \n  initializeEditor = () => {\n    this.codeMirror = CodeMirror(this.editor, {\n      mode: 'markdown',\n      theme: 'monokai',\n      lineNumbers: true, // 왼쪽에 라인 넘버주기\n      lineWrapping: true // 내용이 너무 길면 다음 줄에 작성\n    });\n    this.codeMirror.on('change', this.handleChangeMarkdown);\n  }\n\n  componentDidMount() {\n    this.initializeEditor();\n  }\n\n  handleChange = (e) => {\n    const { onChangeInput } = this.props;\n    const { value, name } = e.target;\n    onChangeInput({name, value});\n  }\n\n  handleChangeMarkdown = (doc) => {\n    const { onChangeInput } = this.props;\n    this.cursor = doc.getCursor(); //텍스트 cursor 위치 저장\n    onChangeInput({\n      name: 'markdown',\n      value: doc.getValue()\n    });\n  }\n  \n  componentDidUpdate(prevProps, prevState) {\n    // markdown이 변경되면 에디터 값도 변경합니다.\n    // 이 과정에서 텍스트 커서의 위치가 초기화되기 때문에\n    // 저장한 커서의 위치가 있으면 해당 위치로 설정합니다.\n    if(prevProps.markdown !== this.props.markdown) {\n      const { codeMirror, cursor } = this;\n      if(!codeMirror) return; // 인스턴스가 아직 만들지 않았을 때\n      codeMirror.setValue(this.props.markdown);\n      if(!cursor) return; // 커서가 없을경우\n      codeMirror.setCursor(cursor);\n    }\n  }\n\n  render() {\n    const { handleChange } = this;\n    const { tags, title } = this.props;\n\n    return (                          \n      <div className={cx('EditorPane')}>\n        <input \n          className={cx('title')} \n          placeholder=\"제목을 입력하세요\" \n          name=\"title\"\n          value={ title }\n          onChange={ handleChange }\n        />\n        <div className={cx('code-editor')} ref={ref => this.editor=ref}></div>\n        <div className={cx('tags')}>\n          <div className={cx('description')}>태그</div>\n          <input \n            name=\"tags\" \n            placeholder=\"태그를 입력하세요 (쉼표로 구부)\" \n            value={ tags }\n            onChange={ handleChange }\n          /> \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default EditorPane;\n"]},"metadata":{},"sourceType":"module"}