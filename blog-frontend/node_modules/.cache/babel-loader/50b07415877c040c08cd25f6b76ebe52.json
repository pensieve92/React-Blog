{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\uBB38\\uC11C\\\\\\uAC1C\\uBC1C\\\\react\\\\blog\\\\blog-frontend\\\\src\\\\containers\\\\editor\\\\EditorHeaderContainer.js\";\nimport React, { Component } from 'react';\nimport EditorHeader from 'components/editor/EditorHeader';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport * as editorActions from 'store/modules/editor';\n\nclass EditorHeaderContainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleGoBack = () => {\n      const {\n        history\n      } = this.props;\n      history.goBack();\n    };\n\n    this.handleSubmit = async () => {\n      const {\n        title,\n        markdown,\n        tags,\n        EditorActions,\n        history\n      } = this.props;\n      const post = {\n        title,\n        body: markdown,\n        // 태그 텍스트를 , 로 분리시키고 앞뒤 공백을 지운 후 중복되는 값을 제거 합니다.\n        tags: tags === \"\" ? [] : [...new Set(tags.split(',').map(tag => tag.trim()))]\n      };\n\n      try {\n        await EditorActions.writePost(post); // 페이지를 이동 시킵니다. 주의: postId는 위쪽에서 레퍼런스를 만들지 않고\n        // 이 자리에서 this.props.postId를 조회해야 합니다. (현재 값을 불러오기 위함)\n\n        history.push(`/post/${this.props.postId}`);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n  }\n\n  componentDidMount() {\n    const {\n      EditorActions\n    } = this.props;\n    EditorActions.initialize(); // 에디터를 초기화 합니다.\n  }\n\n  render() {\n    const {\n      handleGoBack,\n      handleSubmit\n    } = this;\n    return React.createElement(EditorHeader, {\n      onGoBack: handleGoBack,\n      onSubmit: handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default connect(state => ({\n  title: state.editor.get('title'),\n  markdown: state.editor.get('markdown'),\n  tags: state.editor.get('tags'),\n  postId: state.editor.get('postId')\n}), dispatch => ({\n  EditorActions: bindActionCreators(editorActions, dispatch)\n}))(withRouter(EditorHeaderContainer));","map":{"version":3,"sources":["D:/문서/개발/react/blog/blog-frontend/src/containers/editor/EditorHeaderContainer.js"],"names":["React","Component","EditorHeader","connect","bindActionCreators","withRouter","editorActions","EditorHeaderContainer","handleGoBack","history","props","goBack","handleSubmit","title","markdown","tags","EditorActions","post","body","Set","split","map","tag","trim","writePost","push","postId","e","console","log","componentDidMount","initialize","render","state","editor","get","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAAQC,kBAAR,QAAkC,OAAlC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,OAAO,KAAKC,aAAZ,MAA+B,sBAA/B;;AAGA,MAAMC,qBAAN,SAAoCN,SAApC,CAA8C;AAAA;AAAA;;AAAA,SAM1CO,YAN0C,GAM3B,MAAM;AACjB,YAAM;AAAEC,QAAAA;AAAF,UAAc,KAAKC,KAAzB;AACAD,MAAAA,OAAO,CAACE,MAAR;AACH,KATyC;;AAAA,SAW1CC,YAX0C,GAW3B,YAAY;AACvB,YAAM;AAAEC,QAAAA,KAAF;AAASC,QAAAA,QAAT;AAAmBC,QAAAA,IAAnB;AAAyBC,QAAAA,aAAzB;AAAwCP,QAAAA;AAAxC,UAAoD,KAAKC,KAA/D;AACA,YAAMO,IAAI,GAAG;AACTJ,QAAAA,KADS;AAETK,QAAAA,IAAI,EAAEJ,QAFG;AAGT;AACAC,QAAAA,IAAI,EAAEA,IAAI,KAAK,EAAT,GAAc,EAAd,GAAmB,CAAC,GAAG,IAAII,GAAJ,CAAQJ,IAAI,CAACK,KAAL,CAAW,GAAX,EAAgBC,GAAhB,CAAoBC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAA3B,CAAR,CAAJ;AAJhB,OAAb;;AAMA,UAAI;AACA,cAAMP,aAAa,CAACQ,SAAd,CAAwBP,IAAxB,CAAN,CADA,CAEA;AACA;;AACAR,QAAAA,OAAO,CAACgB,IAAR,CAAc,SAAQ,KAAKf,KAAL,CAAWgB,MAAO,EAAxC;AACH,OALD,CAKE,OAAMC,CAAN,EAAS;AACPC,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACH;AACJ,KA3ByC;AAAA;;AAC1CG,EAAAA,iBAAiB,GAAG;AAChB,UAAM;AAAEd,MAAAA;AAAF,QAAoB,KAAKN,KAA/B;AACAM,IAAAA,aAAa,CAACe,UAAd,GAFgB,CAEY;AAC/B;;AAyBDC,EAAAA,MAAM,GAAG;AACL,UAAM;AAAExB,MAAAA,YAAF;AAAgBI,MAAAA;AAAhB,QAAiC,IAAvC;AAEA,WACI,oBAAC,YAAD;AACI,MAAA,QAAQ,EAAEJ,YADd;AAEI,MAAA,QAAQ,EAAEI,YAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAMH;;AAtCyC;;AAyC9C,eAAeT,OAAO,CACjB8B,KAAD,KAAY;AACRpB,EAAAA,KAAK,EAAEoB,KAAK,CAACC,MAAN,CAAaC,GAAb,CAAiB,OAAjB,CADC;AAERrB,EAAAA,QAAQ,EAAEmB,KAAK,CAACC,MAAN,CAAaC,GAAb,CAAiB,UAAjB,CAFF;AAGRpB,EAAAA,IAAI,EAAEkB,KAAK,CAACC,MAAN,CAAaC,GAAb,CAAiB,MAAjB,CAHE;AAIRT,EAAAA,MAAM,EAAEO,KAAK,CAACC,MAAN,CAAaC,GAAb,CAAiB,QAAjB;AAJA,CAAZ,CADkB,EAOjBC,QAAD,KAAe;AACXpB,EAAAA,aAAa,EAAEZ,kBAAkB,CAACE,aAAD,EAAgB8B,QAAhB;AADtB,CAAf,CAPkB,CAAP,CAUb/B,UAAU,CAACE,qBAAD,CAVG,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport EditorHeader from 'components/editor/EditorHeader'\r\nimport { connect } from 'react-redux';\r\nimport {bindActionCreators } from 'redux';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nimport * as editorActions from 'store/modules/editor';\r\n\r\n\r\nclass EditorHeaderContainer extends Component {\r\n    componentDidMount() {\r\n        const { EditorActions } = this.props;\r\n        EditorActions.initialize(); // 에디터를 초기화 합니다.\r\n    }\r\n\r\n    handleGoBack = () => {\r\n        const { history } = this.props;\r\n        history.goBack();\r\n    }\r\n\r\n    handleSubmit = async () => {\r\n        const { title, markdown, tags, EditorActions, history } = this.props;\r\n        const post = {\r\n            title,\r\n            body: markdown,\r\n            // 태그 텍스트를 , 로 분리시키고 앞뒤 공백을 지운 후 중복되는 값을 제거 합니다.\r\n            tags: tags === \"\" ? [] : [...new Set(tags.split(',').map(tag => tag.trim()))]\r\n        };\r\n        try {\r\n            await EditorActions.writePost(post);\r\n            // 페이지를 이동 시킵니다. 주의: postId는 위쪽에서 레퍼런스를 만들지 않고\r\n            // 이 자리에서 this.props.postId를 조회해야 합니다. (현재 값을 불러오기 위함)\r\n            history.push(`/post/${this.props.postId}`);\r\n        } catch(e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { handleGoBack, handleSubmit } = this;\r\n\r\n        return (\r\n            <EditorHeader\r\n                onGoBack={handleGoBack}\r\n                onSubmit={handleSubmit}\r\n            />        \r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        title: state.editor.get('title'),\r\n        markdown: state.editor.get('markdown'),\r\n        tags: state.editor.get('tags'),\r\n        postId: state.editor.get('postId')\r\n    }),\r\n    (dispatch) => ({\r\n        EditorActions: bindActionCreators(editorActions, dispatch)\r\n    })\r\n)(withRouter(EditorHeaderContainer));"]},"metadata":{},"sourceType":"module"}