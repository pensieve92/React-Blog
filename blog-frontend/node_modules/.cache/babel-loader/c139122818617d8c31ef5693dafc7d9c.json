{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\uBB38\\uC11C\\\\\\uAC1C\\uBC1C\\\\react\\\\blog\\\\blog-frontend\\\\src\\\\components\\\\common\\\\MarkdownRender\\\\MarkdownRender.js\";\nimport React, { Component } from 'react';\nimport styles from './MarkdownRender.scss';\nimport classNames from 'classnames/bind';\nimport marked from 'marked'; // prism 관련 코드 불러오기\n\nimport Prism from 'prismjs';\nimport 'prismjs/themes/prism-okaidia.css'; // 지원할 코드 형식을 불러옵니다.\n// http://prismjs.com/languages-list 참조\n\nimport 'prismjs/components/prism-bash.min.js';\nimport 'prismjs/components/prism-javascript.min.js';\nimport 'prismjs/components/prism-jsx.min.js';\nimport 'prismjs/components/prism-css.min.js';\nconst cx = classNames.bind(styles);\n\nclass MarkdownRender extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      html: ''\n    };\n\n    this.renderMarkdown = () => {\n      const {\n        markdown\n      } = this.props; // 마크다운이 존재하지 않는다면 공백처리\n\n      if (!markdown) {\n        this.setState({\n          html: ''\n        });\n        return;\n      }\n\n      this.setState({\n        html: marked(markdown, {\n          breaks: true,\n          // 일반 엔터로 새 줄 입력\n          sanitize: true // 마크다운 내부 html무시\n\n        })\n      });\n    };\n\n    const {\n      markdown: _markdown\n    } = props; // 서버사이드 렌더링에서도 마크다운 처리가 되도록 constructor 쪽에서도 구현합니다.\n\n    this.state = {\n      html: _markdown ? marked(props.markdown, {\n        breaks: true,\n        sanitize: true\n      }) : ''\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // markdown 값이 변경되면 renderMarkdown을 호출합니다.\n    if (prevProps.markdown !== this.props.markdown) {\n      this.renderMarkdown();\n    } // state가 바뀌면 코드 하이라이팅\n\n\n    if (prevState.html !== this.state.html) {\n      Prism.highlightAll();\n    }\n  }\n\n  render() {\n    const {\n      html\n    } = this.state; // React에서 html을 렌더링하려면 객체를 만들어 내부에\n    // __html 값을 설정해야합니다.\n\n    const markup = {\n      __html: html\n    }; // 그리고 dangerouslySetInnerHTML 값에 해당 객체를 넣어 주면 됩니다.\n\n    return React.createElement(\"div\", {\n      className: cx('markdown-render'),\n      dangerouslySetInnerHTML: markup,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default MarkdownRender;","map":{"version":3,"sources":["D:/문서/개발/react/blog/blog-frontend/src/components/common/MarkdownRender/MarkdownRender.js"],"names":["React","Component","styles","classNames","marked","Prism","cx","bind","MarkdownRender","constructor","props","state","html","renderMarkdown","markdown","setState","breaks","sanitize","componentDidUpdate","prevProps","prevState","highlightAll","render","markup","__html"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AAEA,OAAOC,MAAP,MAAmB,QAAnB,C,CAEA;;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,kCAAP,C,CACA;AACA;;AACA,OAAO,sCAAP;AACA,OAAO,4CAAP;AACA,OAAO,qCAAP;AACA,OAAO,qCAAP;AAEA,MAAMC,EAAE,GAAGH,UAAU,CAACI,IAAX,CAAgBL,MAAhB,CAAX;;AAEA,MAAMM,cAAN,SAA6BP,SAA7B,CAAuC;AAoBrCQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SAnBnBC,KAmBmB,GAnBX;AACNC,MAAAA,IAAI,EAAE;AADA,KAmBW;;AAAA,SAfnBC,cAemB,GAfF,MAAM;AACrB,YAAM;AAAEC,QAAAA;AAAF,UAAe,KAAKJ,KAA1B,CADqB,CAErB;;AACA,UAAG,CAACI,QAAJ,EAAa;AACX,aAAKC,QAAL,CAAc;AAACH,UAAAA,IAAI,EAAC;AAAN,SAAd;AACA;AACD;;AACD,WAAKG,QAAL,CAAc;AACZH,QAAAA,IAAI,EAAER,MAAM,CAACU,QAAD,EAAW;AACrBE,UAAAA,MAAM,EAAE,IADa;AACP;AACdC,UAAAA,QAAQ,EAAE,IAFW,CAEN;;AAFM,SAAX;AADA,OAAd;AAMD,KAEkB;;AAEjB,UAAM;AAAEH,MAAAA,QAAQ,EAARA;AAAF,QAAeJ,KAArB,CAFiB,CAGjB;;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAEE,SAAQ,GAAGV,MAAM,CAACM,KAAK,CAACI,QAAP,EAAiB;AAACE,QAAAA,MAAM,EAAE,IAAT;AAAeC,QAAAA,QAAQ,EAAE;AAAzB,OAAjB,CAAT,GAA4D;AAD/D,KAAb;AAGD;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACvC;AACA,QAAGD,SAAS,CAACL,QAAV,KAAuB,KAAKJ,KAAL,CAAWI,QAArC,EAA+C;AAC7C,WAAKD,cAAL;AACD,KAJsC,CAMvC;;;AACA,QAAGO,SAAS,CAACR,IAAV,KAAmB,KAAKD,KAAL,CAAWC,IAAjC,EAAuC;AACrCP,MAAAA,KAAK,CAACgB,YAAN;AACD;AACF;;AACDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEV,MAAAA;AAAF,QAAW,KAAKD,KAAtB,CADO,CAIP;AACA;;AACA,UAAMY,MAAM,GAAG;AACbC,MAAAA,MAAM,EAAEZ;AADK,KAAf,CANO,CAUP;;AACA,WACE;AAAK,MAAA,SAAS,EAAEN,EAAE,CAAC,iBAAD,CAAlB;AAAuC,MAAA,uBAAuB,EAAEiB,MAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD;;AAtDoC;;AAyDvC,eAAef,cAAf","sourcesContent":["import React, { Component } from 'react';\nimport styles from './MarkdownRender.scss';\nimport classNames from 'classnames/bind';\n\nimport marked from 'marked';\n\n// prism 관련 코드 불러오기\nimport Prism from 'prismjs';\nimport 'prismjs/themes/prism-okaidia.css';\n// 지원할 코드 형식을 불러옵니다.\n// http://prismjs.com/languages-list 참조\nimport 'prismjs/components/prism-bash.min.js';\nimport 'prismjs/components/prism-javascript.min.js';\nimport 'prismjs/components/prism-jsx.min.js';\nimport 'prismjs/components/prism-css.min.js';\n\nconst cx = classNames.bind(styles);\n\nclass MarkdownRender extends Component {\n  state = {\n    html: ''\n  }\n\n  renderMarkdown = () => {\n    const { markdown } = this.props;\n    // 마크다운이 존재하지 않는다면 공백처리\n    if(!markdown){\n      this.setState({html:''});\n      return;\n    }\n    this.setState({\n      html: marked(markdown, {\n        breaks: true, // 일반 엔터로 새 줄 입력\n        sanitize: true // 마크다운 내부 html무시\n      })\n    });\n  }\n\n  constructor(props) {\n    super(props);\n    const { markdown } = props;\n    // 서버사이드 렌더링에서도 마크다운 처리가 되도록 constructor 쪽에서도 구현합니다.\n    this.state = {\n      html: markdown ? marked(props.markdown, {breaks: true, sanitize: true}) : ''      \n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // markdown 값이 변경되면 renderMarkdown을 호출합니다.\n    if(prevProps.markdown !== this.props.markdown) {\n      this.renderMarkdown();\n    }\n\n    // state가 바뀌면 코드 하이라이팅\n    if(prevState.html !== this.state.html) {\n      Prism.highlightAll();\n    }\n  }\n  render() {\n    const { html } = this.state;\n\n\n    // React에서 html을 렌더링하려면 객체를 만들어 내부에\n    // __html 값을 설정해야합니다.\n    const markup = {\n      __html: html\n    };\n\n    // 그리고 dangerouslySetInnerHTML 값에 해당 객체를 넣어 주면 됩니다.\n    return (\n      <div className={cx('markdown-render')} dangerouslySetInnerHTML={markup} />      \n    );\n  }\n}\n\nexport default MarkdownRender;\n"]},"metadata":{},"sourceType":"module"}